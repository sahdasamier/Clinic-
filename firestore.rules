rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Super Admin emails
    function isSuperAdmin() {
      return request.auth != null && 
             (request.auth.token.email == 'admin@sahdasclinic.com' ||
              request.auth.token.email == 'sahdasamier013@gmail.com');
    }
    
    // Get user's clinic ID from users collection
    function getUserClinicId() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.clinicId;
    }
    
    // Check if user belongs to same clinic as the resource
    function isOwnerOrSameClinic(clinicId) {
      return request.auth != null && 
             (getUserClinicId() == clinicId || isSuperAdmin());
    }
    
    // Check if clinic is active
    function isClinicActive(clinicId) {
      return get(/databases/$(database)/documents/clinics/$(clinicId)).data.isActive == true;
    }
    
    // Check if user's clinic is active
    function hasActiveClinicAccess(clinicId) {
      return isSuperAdmin() || (isOwnerOrSameClinic(clinicId) && isClinicActive(clinicId));
    }
    
    // Super admin access to everything
    function hasAdminAccess() {
      return isSuperAdmin();
    }
    
    // Helper functions for validation and security
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function hasValidTimestamps() {
      return request.resource.data.keys().hasAny(['createdAt', 'updatedAt']) &&
             (!('createdAt' in request.resource.data) || request.resource.data.createdAt is timestamp) &&
             (!('updatedAt' in request.resource.data) || request.resource.data.updatedAt is timestamp);
    }
    
    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    function isValidPhone(phone) {
      return phone.matches('^[\\+]?[1-9][\\d]{0,15}$');
    }
    
    function hasRequiredUserFields() {
      return request.resource.data.keys().hasAll(['name', 'email', 'phone', 'specialization', 'clinicId']) &&
             request.resource.data.name is string &&
             request.resource.data.name.size() >= 2 &&
             request.resource.data.name.size() <= 100 &&
             isValidEmail(request.resource.data.email) &&
             isValidPhone(request.resource.data.phone) &&
             request.resource.data.specialization is string &&
             request.resource.data.clinicId is string;
    }
    
    function hasRequiredPatientFields() {
      return request.resource.data.keys().hasAll(['name', 'email', 'phone', 'medicalHistory', 'clinicId', 'createdBy']) &&
             request.resource.data.name is string &&
             request.resource.data.name.size() >= 2 &&
             request.resource.data.name.size() <= 100 &&
             isValidEmail(request.resource.data.email) &&
             isValidPhone(request.resource.data.phone) &&
             request.resource.data.medicalHistory is string &&
             request.resource.data.medicalHistory.size() <= 2000 &&
             request.resource.data.clinicId is string &&
             request.resource.data.createdBy is string;
    }
    
    function hasRequiredClinicFields() {
      return request.resource.data.keys().hasAll(['name', 'address', 'phone', 'email', 'settings']) &&
             request.resource.data.name is string &&
             request.resource.data.name.size() >= 2 &&
             request.resource.data.address is string &&
             request.resource.data.address.size() >= 10 &&
             isValidEmail(request.resource.data.email) &&
             isValidPhone(request.resource.data.phone) &&
             request.resource.data.settings is map;
    }
    
    function isClinicMember(clinicId) {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.clinicId == clinicId;
    }
    
    // Clinics collection - only super admins can manage
    match /clinics/{clinicId} {
      allow read, write: if hasAdminAccess();
    }
    
    // Users collection
    match /users/{userId} {
      // Super admins can do anything (including permissions)
      allow read, write: if hasAdminAccess();
      // Users can always read their own document (needed for clinic status check)
      allow read: if request.auth != null && request.auth.uid == userId;
      // Users can read other users only if same clinic AND clinic is active
      allow read: if hasActiveClinicAccess(resource.data.clinicId);
      // Users can only modify their own data if clinic is active (but NOT permissions field)
      allow write: if request.auth != null && 
                      request.auth.uid == userId && 
                      hasActiveClinicAccess(resource.data.clinicId) &&
                      !('permissions' in request.resource.data);
    }
    
    // Patients collection - clinic isolation + active check
    match /patients/{patientId} {
      allow read, write: if hasAdminAccess();
      allow read, write: if hasActiveClinicAccess(resource.data.clinicId);
      allow create: if hasActiveClinicAccess(request.resource.data.clinicId);
    }
    
    // Appointments collection - clinic isolation + active check
    match /appointments/{appointmentId} {
      allow read, write: if hasAdminAccess();
      allow read, write: if hasActiveClinicAccess(resource.data.clinicId);
      allow create: if hasActiveClinicAccess(request.resource.data.clinicId);
    }
    
    // Payments collection - clinic isolation + active check
    match /payments/{paymentId} {
      allow read, write: if hasAdminAccess();
      allow read, write: if hasActiveClinicAccess(resource.data.clinicId);
      allow create: if hasActiveClinicAccess(request.resource.data.clinicId);
    }
    
    // Inventory collection - clinic isolation + active check
    match /inventory/{inventoryId} {
      allow read, write: if hasAdminAccess();
      allow read, write: if hasActiveClinicAccess(resource.data.clinicId);
      allow create: if hasActiveClinicAccess(request.resource.data.clinicId);
    }
    
    // Notifications collection - clinic isolation + active check
    match /notifications/{notificationId} {
      allow read, write: if hasAdminAccess();
      allow read, write: if hasActiveClinicAccess(resource.data.clinicId);
      allow create: if hasActiveClinicAccess(request.resource.data.clinicId);
    }
    
    // Medical records - clinic isolation + active check
    match /medical_records/{recordId} {
      allow read, write: if hasAdminAccess();
      allow read, write: if hasActiveClinicAccess(resource.data.clinicId);
      allow create: if hasActiveClinicAccess(request.resource.data.clinicId);
    }
    
    // Users collection: /users/{userId}
    match /users/{userId} {
      // Users can read and write their own profile
      allow read, write: if isAuthenticated() && 
                           isOwner(userId) && 
                           hasValidTimestamps();
      
      // Additional validation for writes
      allow write: if hasRequiredUserFields();
      
      // Allow clinic members to read basic info of other clinic members
      allow read: if isAuthenticated() && 
                    exists(/databases/$(database)/documents/users/$(userId)) &&
                    isClinicMember(resource.data.clinicId);
    }
    
    // Patients collection: /patients/{patientId}
    match /patients/{patientId} {
      // Clinic members can read/write patients from their clinic
      allow read, write: if isAuthenticated() && 
                           hasValidTimestamps() &&
                           (
                             // For existing patients, check clinic membership
                             (exists(/databases/$(database)/documents/patients/$(patientId)) &&
                              isClinicMember(resource.data.clinicId)) ||
                             // For new patients, check clinic membership in request data
                             (!exists(/databases/$(database)/documents/patients/$(patientId)) &&
                              isClinicMember(request.resource.data.clinicId))
                           );
      
      // Additional validation for writes
      allow write: if hasRequiredPatientFields() &&
                     request.resource.data.createdBy == request.auth.uid;
      
      // Prevent changing clinicId and createdBy after creation
      allow update: if (!('clinicId' in request.resource.data) || 
                       request.resource.data.clinicId == resource.data.clinicId) &&
                     (!('createdBy' in request.resource.data) || 
                       request.resource.data.createdBy == resource.data.createdBy);
    }
    
    // Clinics collection: /clinics/{clinicId}
    match /clinics/{clinicId} {
      // Anyone authenticated can read clinic info (for referrals, etc.)
      allow read: if isAuthenticated();
      
      // Only clinic members can write clinic data
      allow write: if isAuthenticated() && 
                     hasValidTimestamps() &&
                     hasRequiredClinicFields() &&
                     isClinicMember(clinicId);
      
      // Validate clinic settings structure
      allow write: if request.resource.data.settings.keys().hasAll(['appointmentDuration', 'workingHours', 'allowOnlineBooking', 'requirePaymentUpfront', 'cancellationPolicy', 'timezone']) &&
                     request.resource.data.settings.appointmentDuration is int &&
                     request.resource.data.settings.appointmentDuration >= 15 &&
                     request.resource.data.settings.appointmentDuration <= 180 &&
                     request.resource.data.settings.workingHours is map &&
                     request.resource.data.settings.allowOnlineBooking is bool &&
                     request.resource.data.settings.requirePaymentUpfront is bool &&
                     request.resource.data.settings.cancellationPolicy is string &&
                     request.resource.data.settings.timezone is string;
    }
    
    // Appointments collection: /appointments/{appointmentId}
    match /appointments/{appointmentId} {
      // Clinic members can manage appointments for their clinic
      allow read, write: if isAuthenticated() && 
                           hasValidTimestamps() &&
                           (
                             // For existing appointments, check clinic membership
                             (exists(/databases/$(database)/documents/appointments/$(appointmentId)) &&
                              isClinicMember(resource.data.clinicId)) ||
                             // For new appointments, check clinic membership in request data
                             (!exists(/databases/$(database)/documents/appointments/$(appointmentId)) &&
                              isClinicMember(request.resource.data.clinicId))
                           );
      
      // Validate appointment fields
      allow write: if request.resource.data.keys().hasAll(['patientId', 'patientName', 'doctorId', 'doctorName', 'clinicId', 'appointmentDate', 'appointmentTime', 'duration', 'status', 'notes', 'createdBy']) &&
                     request.resource.data.patientId is string &&
                     request.resource.data.patientName is string &&
                     request.resource.data.doctorId is string &&
                     request.resource.data.doctorName is string &&
                     request.resource.data.clinicId is string &&
                     request.resource.data.appointmentDate is string &&
                     request.resource.data.appointmentTime is string &&
                     request.resource.data.duration is int &&
                     request.resource.data.duration >= 15 &&
                     request.resource.data.duration <= 180 &&
                     request.resource.data.status in ['scheduled', 'confirmed', 'completed', 'cancelled', 'no-show'] &&
                     request.resource.data.notes is string &&
                     request.resource.data.createdBy == request.auth.uid;
    }
    
    // Medical Records collection: /medicalRecords/{recordId}
    match /medicalRecords/{recordId} {
      // Only clinic members can access medical records for their clinic
      allow read, write: if isAuthenticated() && 
                           hasValidTimestamps() &&
                           (
                             // For existing records, check clinic membership
                             (exists(/databases/$(database)/documents/medicalRecords/$(recordId)) &&
                              isClinicMember(resource.data.clinicId)) ||
                             // For new records, check clinic membership in request data
                             (!exists(/databases/$(database)/documents/medicalRecords/$(recordId)) &&
                              isClinicMember(request.resource.data.clinicId))
                           );
      
      // Validate medical record fields
      allow write: if request.resource.data.keys().hasAll(['patientId', 'doctorId', 'clinicId', 'diagnosis', 'treatment', 'medications', 'notes', 'createdBy']) &&
                     request.resource.data.patientId is string &&
                     request.resource.data.doctorId is string &&
                     request.resource.data.clinicId is string &&
                     request.resource.data.diagnosis is string &&
                     request.resource.data.diagnosis.size() >= 3 &&
                     request.resource.data.treatment is string &&
                     request.resource.data.treatment.size() >= 3 &&
                     request.resource.data.medications is string &&
                     request.resource.data.notes is string &&
                     request.resource.data.createdBy == request.auth.uid;
      
      // Prevent changing sensitive fields after creation
      allow update: if (!('patientId' in request.resource.data) || 
                       request.resource.data.patientId == resource.data.patientId) &&
                     (!('clinicId' in request.resource.data) || 
                       request.resource.data.clinicId == resource.data.clinicId) &&
                     (!('createdBy' in request.resource.data) || 
                       request.resource.data.createdBy == resource.data.createdBy);
    }
    
    // Demo and test data (optional - for development)
    match /demo/{document} {
      allow read, write: if isAuthenticated();
    }
    
    // Default deny all other documents
    match /{document=**} {
      allow read, write: if hasAdminAccess();
    }
  }
}