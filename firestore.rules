rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is super admin
    function isSuperAdmin() {
      return request.auth != null && request.auth.token.email in [
        'admin@sahdasclinic.com',
        'sahdasamier013@gmail.com'
      ];
    }
    
    // Helper function to check if user has admin custom claim
    function isAdminViaCustomClaim() {
      return request.auth != null && 
             request.auth.token.get('admin', false) == true;
    }
    
    // Helper function to check if user is admin (either email or custom claim)
    function isAdmin() {
      return isSuperAdmin() || isAdminViaCustomClaim();
    }
    
    // Helper function to check if update only touches allowed fields
    function onlyUpdatingAllowedFields() {
      let allowedFields = ['firstName', 'lastName', 'email'];
      let changedFields = request.resource.data.diff(resource.data).affectedKeys();
      return changedFields.hasOnly(allowedFields);
    }
    
    // Helper function to check if sensitive fields are being modified
    function modifyingSensitiveFields() {
      let sensitiveFields = ['permissions', 'role', 'clinicId', 'isActive', 'createdBy'];
      let changedFields = request.resource.data.diff(resource.data).affectedKeys();
      return changedFields.hasAny(sensitiveFields);
    }
    
    // ðŸ”’ Users collection - SECURE RULES
    match /users/{userId} {
      // Anyone can read user documents (needed for admin functions and user lookups)
      allow read: if request.auth != null;
      
      // Only admins can create user documents
      allow create: if isAdmin();
      
      // Users can update ONLY safe fields (name, email) in their own document
      allow update: if request.auth != null && 
                   request.auth.uid == userId && 
                   onlyUpdatingAllowedFields() && 
                   !modifyingSensitiveFields();
      
      // Admins can update ANY fields in ANY user document
      allow update: if isAdmin();
      
      // Only admins can delete users
      allow delete: if isAdmin();
    }
    
    // ðŸ”’ Clinics collection - Special handling for demo clinic
    match /clinics/{clinicId} {
      // Allow unauthenticated read access to demo clinic for app initialization
      allow read: if clinicId == 'demo-clinic' || request.auth != null;
      
      // Demo clinic: Allow any authenticated user to create/update (for initialization)
      // Other clinics: Only admins can modify
      allow write, create, update: if (clinicId == 'demo-clinic' && request.auth != null) || isAdmin();
      
      // Only admins can delete clinics
      allow delete: if isAdmin();
    }
    
    // ðŸ”’ User invitations - Only admins can manage
    match /user_invitations/{invitationId} {
      allow read: if request.auth != null;
      allow write, create, delete: if isAdmin();
    }
    
    // ðŸ”’ Invitations - Only admins can manage
    match /invitations/{invitationId} {
      allow read: if request.auth != null;
      allow write, create, delete: if isAdmin();
    }
    
    // ðŸ”’ Patients collection - Clinic-based access with admin override
    match /patients/{patientId} {
      allow read, write: if request.auth != null && 
                        (isAdmin() || 
                         resource.data.clinicId == getUserClinicId());
      allow create: if request.auth != null && 
                   (isAdmin() || 
                    request.resource.data.clinicId == getUserClinicId());
      allow delete: if isAdmin();
    }
    
    // Helper function to get user's clinic ID
    function getUserClinicId() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.clinicId;
    }
    
    // ðŸ”’ Appointments collection - Clinic-based access
    match /appointments/{appointmentId} {
      allow read, write: if request.auth != null && 
                        (isAdmin() || 
                         resource.data.clinicId == getUserClinicId());
      allow create: if request.auth != null && 
                   (isAdmin() || 
                    request.resource.data.clinicId == getUserClinicId());
      allow delete: if isAdmin();
    }
    
    // ðŸ”’ Doctor-Patient Assignments - Clinic-based access
    match /doctor_patient_assignments/{assignmentId} {
      allow read, write: if request.auth != null && 
                        (isAdmin() || 
                         resource.data.clinicId == getUserClinicId());
      allow create: if request.auth != null && 
                   (isAdmin() || 
                    request.resource.data.clinicId == getUserClinicId());
      allow delete: if isAdmin();
    }
    
    // ðŸ”’ Medical Records - Clinic-based access
    match /medicalRecords/{recordId} {
      allow read, write: if request.auth != null && 
                        (isAdmin() || 
                         resource.data.clinicId == getUserClinicId());
      allow create: if request.auth != null && 
                   (isAdmin() || 
                    request.resource.data.clinicId == getUserClinicId());
      allow delete: if isAdmin();
    }
    
    // ðŸ”’ Inventory collection - Clinic-based access
    match /inventory/{inventoryId} {
      allow read, write: if request.auth != null && 
                        (isAdmin() || 
                         resource.data.clinicId == getUserClinicId());
      allow create: if request.auth != null && 
                   (isAdmin() || 
                    request.resource.data.clinicId == getUserClinicId());
      allow delete: if isAdmin();
    }
    
    // ðŸ”’ Payments collection - Clinic-based access
    match /payments/{paymentId} {
      allow read, write: if request.auth != null && 
                        (isAdmin() || 
                         resource.data.clinicId == getUserClinicId());
      allow create: if request.auth != null && 
                   (isAdmin() || 
                    request.resource.data.clinicId == getUserClinicId());
      allow delete: if isAdmin();
    }
    
    // ðŸ”’ Default deny for any other collections
    match /{document=**} {
      allow read: if request.auth != null;
      allow write, create, delete: if isAdmin();
    }
  }
} 